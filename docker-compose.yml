services:
  postgres:
    image: postgres:15-alpine
    container_name: mcp-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-mcp_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-mcp_password}
      POSTGRES_DB: ${POSTGRES_DB:-mcp_db}
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-mcp_user} -d ${POSTGRES_DB:-mcp_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mcp-network

  ollama:
    image: ollama/ollama:latest
    container_name: mcp-ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mcp-network

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mcp-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-mcp_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-mcp_password}
      POSTGRES_DB: ${POSTGRES_DB:-mcp_db}
      OLLAMA_HOST: http://ollama:11434
    depends_on:
      postgres:
        condition: service_healthy
      ollama:
        condition: service_healthy
    volumes:
      - ./app:/app/app
      - ./data:/app/data
      - ./config.yaml:/app/config.yaml:ro
      - ./docker-entrypoint.sh:/usr/local/bin/docker-entrypoint.sh
    entrypoint: /usr/local/bin/docker-entrypoint.sh
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - mcp-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: mcp-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      BACKEND_API_URL: http://backend:8000
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: pnpm dev
    networks:
      - mcp-network

volumes:
  postgres_data:
    driver: local
  ollama_data:
    driver: local

networks:
  mcp-network:
    driver: bridge
