services:
  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: mcp-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-mcp_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-mcp_password}
      POSTGRES_DB: ${POSTGRES_DB:-mcp_db}
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-mcp_user} -d ${POSTGRES_DB:-mcp_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mcp-network

  # Ollama for AI model management
  ollama:
    image: ollama/ollama:latest
    container_name: mcp-ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mcp-network

  # MCP Admin API service (Python backend)
  mcp-api:
    build: . # Build context is the root directory for the backend
    container_name: mcp-api
    restart: unless-stopped
    ports:
      - "8000:8000" # Expose backend API on port 8000
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-mcp_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-mcp_password}
      POSTGRES_DB: ${POSTGRES_DB:-mcp_db}
      OLLAMA_HOST: http://ollama:11434 # Backend uses service name to reach Ollama
      # Environment variable for frontend to know backend API URL
      FRONTEND_API_URL: http://mcp-api:8000
    depends_on:
      postgres:
        condition: service_healthy
      ollama:
        condition: service_healthy
    volumes:
      - ./config.yaml:/app/config.yaml:ro
      - ./scripts:/app/scripts:ro
      - ./docker-entrypoint.sh:/usr/local/bin/docker-entrypoint.sh
    entrypoint: ["/usr/local/bin/docker-entrypoint.sh"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/products"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - mcp-network

  # Service to pull Ollama models
  ollama-model-puller:
    image: alpine/git:latest
    container_name: ollama-model-puller
    depends_on:
      ollama:
        condition: service_healthy
    command: >
      sh -c "
        apk add --no-cache curl &&
        curl http://ollama:11434/api/pull -d '{\"name\": \"llama3.2:1b-instruct-q2_K\"}' &&
        curl http://ollama:11434/api/pull -d '{\"name\": \"gemma3:1b-it-q2_K\"}' &&
        curl http://ollama:11434/api/pull -d '{\"name\": \"qwen2:0.5b\"}'"
    networks:
      - mcp-network

  # MCP Frontend service (Next.js)
  frontend:
    build:
      context: ./frontend # Build context is the frontend directory
      dockerfile: Dockerfile # Use the Dockerfile within the frontend context
    container_name: mcp-frontend
    restart: unless-stopped
    ports:
      - "3000:3000" # Map host port 3000 to container port 3000
    environment:
      # Frontend needs to know where the backend API is
      NEXT_PUBLIC_BACKEND_API_URL: http://mcp-api:8000
      # WebSocket URL for pipeline progress
      NEXT_PUBLIC_WS_URL: ws://mcp-api:8000/ws/pipeline-progress
    depends_on:
      mcp-api:
        condition: service_healthy # Frontend depends on backend API being healthy
    networks:
      - mcp-network # Ensure frontend is on the same network as backend
    volumes:
      - /home/odin/.local/share/pnpm/store:/pnpm-store

volumes:
  postgres_data:
    driver: local
  ollama_data:
    driver: local

networks:
  mcp-network:
    driver: bridge
